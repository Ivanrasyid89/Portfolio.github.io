# -*- coding: utf-8 -*-
"""Sentiment Analysis (Netflix Rating).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gfnRCOlw_aSLbHRwyXwda1vLwnWFu84t

# **IMPORT LIBRARY**
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import string
import re

import nltk
from nltk.corpus import stopwords
from nltk import word_tokenize
from nltk.stem import PorterStemmer
from nltk import pos_tag
from nltk.corpus import wordnet
from nltk.tokenize import word_tokenize as word_tokenize_wrapper
from nltk.stem import WordNetLemmatizer
from wordcloud import WordCloud,STOPWORDS
from textblob import TextBlob
from nltk.sentiment.vader import SentimentIntensityAnalyzer
nltk.download('punkt')
nltk.download('vader_lexicon')
nltk.download('stopwords')
nltk.download('wordnet')

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_curve, auc, roc_auc_score, confusion_matrix, classification_report
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import MultinomialNB

"""# **IMPORT DATA**

## **Read Data**
"""

data = pd.read_csv("netflix_reviews.csv")
data.head()

"""## **Data Information**"""

data.info()

"""# **DATA PROCESSING**

## **Data Cleaning**
"""

data.isnull().sum()

data = data.dropna()
data.isnull().sum()

"""## **Duplicate Data**"""

data_duplicated = data.duplicated().sum()
data_duplicated

data = data.drop_duplicates()
data_duplicated = data.duplicated().sum()
data_duplicated

data.head()

data['content'].head(10)

"""# **TEXT PROCESSING**

## **Case Folding**
"""

def case_folding(text):
    # Convert to lowercase
    text = text.lower()
    return text

data['content'] = data['content'].apply(case_folding)
data['content'].head(10)

"""## **Cleaning**"""

def cleaning(text):
    # Remove punctuation
    text = re.sub(r'[^\w\s]|[\d]|_', '', text)
    # Remove number
    text = re.sub(r'\d+', '', text)
    # Remove spacing
    text = text.strip()
    return text

data['content'] = data['content'].apply(cleaning)
data['content'].head(10)

"""## **Tokenizing**"""

def tokenizing(text):
    # Tokenize
    tokens = word_tokenize(text)
    return tokens

data['content'] = data['content'].apply(tokenizing)
data['content'].head(10)

"""## **Lemmatization**"""

def lemmatization(text):
    # Initialize Lemmatizer
    lemmatizer = WordNetLemmatizer()
    # Lemmatize
    lemmatized_words = [lemmatizer.lemmatize(word) for word in text]
    return lemmatized_words

data['content'] = data['content'].apply(lemmatization)
data['content'].head(10)

"""## **Stopwords Removal**"""

def stopword(text):
    # Remove stopwords
    stop_words = set(stopwords.words('english'))
    filtered_words = [word for word in text if word not in stop_words]
    return filtered_words

data['content'] = data['content'].apply(stopword)
data['content'].head(10)

"""## **Labeling**"""

# Initialize Vader Analyzer
analyzer = SentimentIntensityAnalyzer()

# Function to get sentiment
def vader_sentiment(text):
    # Convert text to string if it's not already
    if isinstance(text, list):
        text = ' '.join(text)
    score = analyzer.polarity_scores(text)
    return score['compound']

# Function to convert sentiment value to label
def vader_sentiment_label(compound):
    # Set threshold for positive, neutral, and negative sentiment
    if compound > 0.1:
        return 'Positive'
    elif compound < -0.1:
        return 'Negative'
    else:
        return 'Neutral'

data['vader_sentiment'] = data['content'].apply(vader_sentiment)
data['vader_sentiment_label'] = data['vader_sentiment'].apply(vader_sentiment_label)

data[['content', 'vader_sentiment', 'vader_sentiment_label']].head(10)

# Label Encoding
label_encoder = LabelEncoder()
data['vader_sentiment_label_encoded'] = label_encoder.fit_transform(data['vader_sentiment_label'])
data.head()

"""# **EXPLORATORY DATA ANALYSIS**

## **Proportion of Sentiment**
"""

# Pie Chart
plt.figure(figsize=(8, 4))
data['vader_sentiment_label'].value_counts().plot(kind='pie', autopct='%1.1f%%', startangle=90, colors=['skyblue', 'salmon', 'orange'])
plt.title('Proportion of Sentiment', fontsize=12)
plt.ylabel('')
plt.tight_layout()
plt.show()

"""## **Word Cloud**"""

def create_wordcloud(text, title=None):
    # Join all text elements into a single string, handling potential lists within the Series
    all_text = " ".join( " ".join(text_item) if isinstance(text_item, list) else text_item for text_item in text)
    stop_words = set(STOPWORDS.union(set(stopwords.words('english'))))
    wordcloud = WordCloud(width=800, height=400, background_color='white', stopwords=stop_words).generate(all_text)
    plt.figure(figsize=(10, 6))
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.axis('off')
    if title:
        plt.title(title, fontsize=20)
    plt.show()

# Create Word Clouds for each sentiment
positive_reviews = data[data['vader_sentiment_label'] == 'Positive']['content']
negative_reviews = data[data['vader_sentiment_label'] == 'Negative']['content']
neutral_reviews = data[data['vader_sentiment_label'] == 'Neutral']['content']

create_wordcloud(positive_reviews, "Positive Reviews")
create_wordcloud(negative_reviews, "Negative Reviews")
create_wordcloud(neutral_reviews, "Neutral Reviews")

"""# **FEATURE EXTRACTION**

## **CountVectorizer**
"""

# Function Vectorizer
def vectorizer(text):
    # Convert text to string if it's not already
    if isinstance(text[0], list):
        text = [' '.join(doc) for doc in text]

    # Initialize CountVectorizer
    vectorizer = CountVectorizer()
    X = vectorizer.fit_transform(text)
    return X, vectorizer

X_counts, count_vectorizer = vectorizer(data['content'])

"""## **Change to TF-IDF**"""

# Function to change representation to TF-IDF
def tfidf_transformer(X_counts):
    # Initialize TF-IDF Transformer
    transformer = TfidfTransformer()
    X_tfidf = transformer.fit_transform(X_counts)
    return X_tfidf

# Inisialize TF-IDF
X_tfidf = tfidf_transformer(X_counts)
print("TF-IDF Shape:", X_tfidf.shape)

"""# **SPLIT DATA**"""

y = data['vader_sentiment_label_encoded']
X_train, X_test, y_train, y_test = train_test_split(X_tfidf, y, test_size=0.2, random_state=42)

print(X_train.toarray()[:5])

print(X_test.toarray()[:5])

print(y_train.head())

print(y_test.head())

"""# **MODELLING**

## **Multinomial Logistic Regression**

### **Build Model**
"""

# Build Model
model_mlg = LogisticRegression(multi_class='multinomial', solver='sag')

"""### **Train Model**"""

# Train Model
model_mlg.fit(X_train, y_train)

"""## **Naive Bayes Multinomial**

### **Build Model**
"""

# Build Model
model_nbm = MultinomialNB(alpha = 0.1, fit_prior = True, force_alpha = True)

"""### **Train Model**"""

# Train Model
model_nbm.fit(X_train, y_train)

"""# **MODEL EVALUATION**

## **Multinomial Logistic Regression**

### **Predict**
"""

# Predict
y_pred_mlg = model_mlg.predict(X_test)
y_pred_mlg

"""### **Evaluation Metric**"""

# Evaluation Metric
print(f'Accuracy: {accuracy_score(y_test, y_pred_mlg)}')
print(f'Precision: {precision_score(y_test, y_pred_mlg, average="weighted")}')
print(f'Recall: {recall_score(y_test, y_pred_mlg, average="weighted")}')
print(f'F1-Score: {f1_score(y_test, y_pred_mlg, average="weighted")}')

"""### **Probability**"""

# Probability
y_prob_mlg = model_mlg.predict_proba(X_test)
print(y_prob_mlg)

"""### **ROC Score**"""

# ROC Score
mlg_roc_auc = roc_auc_score(y_test, y_prob_mlg, multi_class='ovr')
print(f'ROC AUC Score: {mlg_roc_auc}')

"""### **ROC Curve**"""

# ROC Curve
fpr = dict()
tpr = dict()
roc_auc = dict()
for i in range(len(model_mlg.classes_)):
    fpr[i], tpr[i], _ = roc_curve(y_test == i, model_mlg.predict_proba(X_test)[:, i])  # Use predict_proba for multi-class
    roc_auc[i] = auc(fpr[i], tpr[i])

# Plot ROC curve
plt.figure(figsize=(8, 6))
for i in range(len(model_mlg.classes_)):
    plt.plot(fpr[i], tpr[i], label=f'Class {i} (AUC = {roc_auc[i]:.2f})')

plt.plot([0, 1], [0, 1], 'k--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve Multinomial Logistic Regression')
plt.legend(loc="lower right")
plt.show()

# Confusion Matrix
conf_mat = confusion_matrix(y_test, y_pred_mlg)
plt.figure(figsize=(8, 6))
sns.heatmap(conf_mat, annot=True, fmt='d', cmap='Blues', xticklabels=model_mlg.classes_, yticklabels=model_mlg.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Classification Report
print(classification_report(y_test, y_pred_mlg))

"""## **Naive Bayes Multinomial**

### **Predict**
"""

# Predict
y_pred_nbm = model_nbm.predict(X_test)
y_pred_nbm

"""### **Evaluation Metric**"""

# Evaluation Metric
print(f'Accuracy: {accuracy_score(y_test, y_pred_nbm)}')
print(f'Precision: {precision_score(y_test, y_pred_nbm, average="weighted")}')
print(f'Recall: {recall_score(y_test, y_pred_nbm, average="weighted")}')
print(f'F1-Score: {f1_score(y_test, y_pred_nbm, average="weighted")}')

"""### **Probability**"""

# Probability
y_prob_nbm = model_nbm.predict_proba(X_test)
print(y_prob_nbm)

"""### **ROC Score**"""

# ROC Score
nbm_roc_auc = roc_auc_score(y_test, y_prob_nbm, multi_class='ovr')
print(f'ROC AUC Score: {nbm_roc_auc}')

"""### **ROC Curve**"""

# ROC Curve
fpr = dict()
tpr = dict()
roc_auc = dict()
for i in range(len(model_nbm.classes_)):
    fpr[i], tpr[i], _ = roc_curve(y_test == i, model_nbm.predict_proba(X_test)[:, i])  # Use predict_proba for multi-class
    roc_auc[i] = auc(fpr[i], tpr[i])

# Plot ROC Curve
plt.figure(figsize=(8, 6))
for i in range(len(model_nbm.classes_)):
    plt.plot(fpr[i], tpr[i], label=f'Class {i} (AUC = {roc_auc[i]:.2f})')

plt.plot([0, 1], [0, 1], 'k--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve Naive Bayes Multinomial')
plt.legend(loc="lower right")
plt.show()

# Confusion Matrix
con_mat = confusion_matrix(y_test, y_pred_nbm)
plt.figure(figsize=(8, 6))
sns.heatmap(con_mat, annot=True, fmt='d', cmap='Blues', xticklabels=model_nbm.classes_, yticklabels=model_nbm.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Classification Report
print(classification_report(y_test, y_pred_nbm))

"""## **Score Comparison**"""

score_comparison = pd.DataFrame({'Model': ['Multinomial Logistic Regression', 'Naive Bayes Multinomial'],
                                'Accuracy': [accuracy_score(y_test, y_pred_mlg), accuracy_score(y_test, y_pred_nbm)],
                                'Precision': [precision_score(y_test, y_pred_mlg, average="weighted"), precision_score(y_test, y_pred_nbm, average="weighted"),],
                                'Recall': [recall_score(y_test, y_pred_mlg, average="weighted"), recall_score(y_test, y_pred_nbm, average="weighted")],
                                'F1-Score': [f1_score(y_test, y_pred_mlg, average="weighted"), f1_score(y_test, y_pred_nbm, average="weighted")],
                                'ROC AUC Score': [mlg_roc_auc, nbm_roc_auc]})
score_comparison
